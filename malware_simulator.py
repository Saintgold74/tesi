# malware_simulator.py
import numpy as np
import matplotlib.pyplot as plt

def simulate_malware_spread(num_stores=100, beta=2.3, gamma=1.0, days=30):
    """Simula propagazione malware con modello SIR dalla tesi"""
    
    # Stato iniziale
    S = num_stores - 1  # Susceptible
    I = 1               # Infected (paziente zero)
    R = 0               # Recovered/Removed
    
    # Arrays per tracking
    S_history, I_history, R_history = [S], [I], [R]
    
    for day in range(days):
        # Nuove infezioni
        new_infections = min(int(beta * S * I / num_stores), S)
        
        # Recovery
        new_recoveries = int(gamma * I)
        
        # Update stati
        S -= new_infections
        I += new_infections - new_recoveries
        R += new_recoveries
        
        S_history.append(S)
        I_history.append(I)
        R_history.append(R)
    
    # Plot
    plt.figure(figsize=(10, 6))
    plt.plot(S_history, 'b-', label='Susceptible', linewidth=2)
    plt.plot(I_history, 'r-', label='Infected', linewidth=2)
    plt.plot(R_history, 'g-', label='Recovered', linewidth=2)
    plt.xlabel('Giorni')
    plt.ylabel('Numero di Store')
    plt.title(f'Propagazione Malware (β={beta}, γ={gamma})')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.savefig('malware_spread.png')
    plt.show()
    
    print(f"Picco infezioni: {max(I_history)} store al giorno {I_history.index(max(I_history))}")
    print(f"Totale infetti: {R_history[-1]} store ({R_history[-1]/num_stores*100:.1f}%)")

# Esegui simulazione
simulate_malware_spread()